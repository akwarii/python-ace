#!/usr/bin/python3
import argparse
import logging
import sys
from collections import Counter, defaultdict
from pathlib import Path
from typing import Any

import numpy as np
import pandas as pd
from ase import Atoms
from ase.io import read

LOG_FMT = "%(asctime)s %(levelname).1s - %(message)s"
logging.basicConfig(level=logging.INFO, format=LOG_FMT, datefmt="%Y/%m/%d %H:%M:%S")
logger = logging.getLogger()


class InvalidArgumentError(ValueError):
    pass


class ParseKwargs(argparse.Action):
    def __call__(
        self,
        parser: argparse.ArgumentParser,
        namespace: argparse.Namespace,
        values: list[str],
        option_string: str | None = None,
    ) -> None:
        setattr(namespace, self.dest, dict())
        for value in values:
            if value == "auto":
                key = "auto"
                val = True
            else:
                splt = value.split(":")
                key = splt[0]

                try:
                    val = float(splt[1])
                except ValueError:
                    if len(splt) != 2 or splt[1] != "auto":
                        raise InvalidArgumentError(
                            f"Invalid argument value for free atom energy: {value}. "
                            "Should be in the format: 'element:energy' or 'element:auto'."
                        )
                    val = splt[1]

            getattr(namespace, self.dest)[key] = val


def build_parser() -> argparse.ArgumentParser:
    parser = argparse.ArgumentParser()

    parser.add_argument(
        "-wd",
        "--working-dir",
        help="Top directory containing the calculations. Default is the current directory.",
        type=str,
        default=".",
        dest="working_dir",
    )
    parser.add_argument(
        "-o",
        "--output-dataset-filename",
        help="Filename for the output pickle file. Default is 'collected.pckl.gzip'.",
        type=str,
        default="collected.pckl.gzip",
        dest="output_dataset_filename",
    )
    parser.add_argument(
        "-fae",
        "--free-atom-energy",
        help="Dictionary of reference energies for isolated atoms. Use 'auto' to extract from the dataset. "
        "Example: 'Cu:-0.456 Zn:auto'. Note the spacing. Default is zero for all elements.",
        nargs="*",
        dest="free_atom_energy",
        default=defaultdict(int),
        action=ParseKwargs,
    )
    parser.add_argument(
        "--selection",
        type=str,
        default="last",
        dest="selection",
        help="Selection criteria for multiple configurations in a single VASP calculation. "
        "Options: 'first', 'last', 'all', 'first_and_last'. Default is 'last'.",
    )

    return parser


def get_ase_atoms_energy_forces(atoms: Atoms) -> tuple[Atoms, float, np.ndarray]:
    """
    Extracts ASE atoms, free energy, and forces from the given ASE atoms object.
    This is a helper function to create a clean ASE atoms object from the given
    ASE atoms object that may include lot of DFT information.

    :param atoms: The ASE atoms object.

    :return: A tuple containing the cleaned atoms object, free energy, and forces.
    """
    cleaned_atoms = Atoms(
        symbols=atoms.get_chemical_symbols(),
        positions=atoms.get_positions(),
        cell=atoms.get_cell(),
        pbc=atoms.get_pbc(),
    )

    free_energy = atoms.get_potential_energy(force_consistent=True)
    forces = atoms.get_forces()

    return cleaned_atoms, free_energy, forces


def generate_selected_indices(selection: str, n_structures: int) -> list[int]:
    """Generates a list of selected indices based on the given selection criteria.

    :param selection: A string specifying the selection criteria. It can be one of the following:
                      "all" - Select all indices.
                      "first" - Select the first index.
                      "last" - Select the last index.
                      "first_and_last" - Select both the first and last indices.
                      A slice notation string (e.g., "0:10:-1") to select a range of indices.
    :param n_structures: The total number of structures available.
    :return: A list of selected indices based on the selection criteria.
    """
    if selection == "last":
        selected = [n_structures - 1]
    elif selection == "first":
        selected = [0]
    elif selection == "first_and_last":
        if n_structures > 1:
            selected = [0, n_structures - 1]
        else:
            selected = [0]
    elif selection == "all":
        selected = list(range(n_structures))
    elif ":" in selection:
        i = [int(s) if s else None for s in selection.split(":")]
        i += (3 - len(i)) * [None]
        slc = slice(*i)
        selected = list(range(n_structures))[slc]
    else:
        raise InvalidArgumentError(
            f'select_steps option `{selection}` is not valid. Should be one of the  "all", "first", "last", "first_and_last"'
        )

    return selected


def extract_vasp_data(filename: Path, selection: str = "last") -> dict[str, list[Any]]:
    """
    Reads VASP output files and extracts relevant data.

    :param filename: path of the VASP output file.
    :param format: The format of the VASP output file, ie 'vasp-out' or 'vasp-xml'.
    :param selection: A string specifying the selection criteria. It can be one of the following:
                      "all" - Select all indices.
                      "first" - Select the first index.
                      "last" - Select the last index.
                      "first_and_last" - Select both the first and last indices.
                      A slice notation string (e.g., "0:10:-1") to select a range of indices.

    :return: A dictionary containing the extracted data with keys "name", "energy", "forces", and "ase_atoms".
    """
    output = {"name": [], "energy": [], "forces": [], "ase_atoms": []}

    fmt = "vasp-out" if "OUTCAR" in filename.name else "vasp-xml"

    if not filename.stat().st_size:
        return output

    vasp_output = read(filename, format=fmt, index=":")
    selected_index = generate_selected_indices(selection, len(vasp_output))

    for index, atoms in enumerate(vasp_output):
        if index not in selected_index:
            continue

        cleaned_atoms, free_energy, forces = get_ase_atoms_energy_forces(atoms)  # type: ignore

        output["name"].append(f"{filename}##{index}")
        output["ase_atoms"].append(cleaned_atoms)
        output["energy"].append(free_energy)
        output["forces"].append(forces)

    return output


def get_isolated_atom_energy(df: pd.DataFrame, element: str) -> float:
    mask = (df["n_atoms"] == 1) & (df["volume"] > 500)
    filtered_df = df.loc[mask].sort_values("volume", ascending=False)

    if len(filtered_df) > 0:
        row = filtered_df.iloc[0]
        ref_energy = row["energy"]
        ref_volume = row["volume"]
        ref_name = row["name"]
        logger.info(
            f"Successfully extracted free energy for element {element}: E={ref_energy} eV/atom, V={ref_volume} A^3/atom, from {ref_name}"
        )
    else:
        ref_energy = 0.0
        logger.warning(f"No reference free atom energy found for {element}, set to E=0")

    return ref_energy


def main() -> None:
    parser = build_parser()
    args_parse = parser.parse_args()
    working_dir = Path(args_parse.working_dir)
    atomic_energy_map = args_parse.free_atom_energy
    output_dataset_filename = args_parse.output_dataset_filename
    selection = args_parse.selection

    logger.info(
        f"Type of selection when multiple configurations are found in the same file: {selection}"
    )

    # Find VASP output files
    files = []
    for pattern in ["OUTCAR", "vasprun.xml"]:
        files.extend(working_dir.rglob(pattern))

    if files:
        logger.info(f"Found {len(files)} files to process in {working_dir}")
    else:
        logger.critical(f"No OUTCAR or vasprun.xml files found in {working_dir}")
        sys.exit(1)

    # Collect data from VASP output files
    data = {"name": [], "energy": [], "forces": [], "ase_atoms": []}
    for f in files:
        try:
            vasp_output_dict = extract_vasp_data(f, selection)
            for key, value in vasp_output_dict.items():
                data[key] += value
            logger.info(f"Successfully collected {len(vasp_output_dict['name'])} entries from {f}")
        except Exception as e:
            logger.error(f"Error while trying to read {f}: {e}")

    logger.info(f"Total number of entries collected: {len(data['name'])}")

    # Build a DataFrame from the collected data
    df = pd.DataFrame(data)
    df["n_atoms"] = df["ase_atoms"].map(len)
    df["comp_dict"] = df["ase_atoms"].map(lambda at: Counter(at.get_chemical_symbols()))  # type: ignore
    df["volume"] = df["ase_atoms"].map(lambda atoms: atoms.get_volume())  # type: ignore

    # Extract elements from the dataset
    elements = set()
    for cd in df["comp_dict"]:
        elements.update(cd.keys())
    elements = sorted(elements)

    for el in elements:
        df["n_" + el] = df["comp_dict"].map(lambda d: d.get(el, 0))

    logger.info(f"Elements found in the dataset: {', '.join(map(str, elements))}")

    # Try to extract free atom energies for elements set to "auto"
    for el, val in atomic_energy_map.items():
        if val == "auto":
            atomic_energy_map[el] = get_isolated_atom_energy(df, el)

    # Check if there are elements in the dataset that are not in the free atom energy map
    missing_elements = set(elements) - set(atomic_energy_map.keys())
    if "auto" in atomic_energy_map or missing_elements:
        for el in missing_elements:
            logger.info(
                f"Element {el} is not specified in the free energy options, trying to extract from the dataset..."
            )
            atomic_energy_map[el] = get_isolated_atom_energy(df, el)

    # Filter out the free atom energies that are not in the dataset
    atomic_energy_map = {el: atomic_energy_map[el] for el in elements}
    logger.info(
        f"Atomic reference energies: {', '.join([f'{k}: {v}' for k, v in atomic_energy_map.items()])}"
    )

    # Correct the energy
    n_el_cols = ["n_" + el for el in elements]
    free_atom_arr = np.array([atomic_energy_map[e] for e in elements])
    df["energy_corrected"] = df["energy"] - (df[n_el_cols] * free_atom_arr).sum(axis=1)
    df["energy_corrected_per_atom"] = df["energy_corrected"] / df["n_atoms"]

    # Statistics
    number_atoms = df["ase_atoms"].map(len).sum()

    mean_energy = df["energy_corrected_per_atom"].mean()
    std_energy = df["energy_corrected_per_atom"].std()
    min_energy = df["energy_corrected_per_atom"].min()
    max_energy = df["energy_corrected_per_atom"].max()

    df["magnitude_forces"] = df["forces"].map(np.linalg.norm)
    avg_force_mag = df["magnitude_forces"].mean()
    std_force_mag = df["magnitude_forces"].std()
    min_force_mag = df["magnitude_forces"].min()
    max_force_mag = df["magnitude_forces"].max()

    logger.info(f"Total number of structures: {len(df)}")
    logger.info(f"Total number of atoms: {number_atoms}")
    logger.info(f"Mean number of atoms per structure: {number_atoms / len(df):.3f}")

    logger.info(f"Average energy per atom: {mean_energy:.3f} eV/atom")
    logger.info(f"Std. dev. of energy per atom: {std_energy:.3f} eV/atom")
    logger.info(f"Min / max energy per atom: {min_energy:.3f} / {max_energy:.3f} eV/atom")

    logger.info(f"Average force magnitude: {avg_force_mag:.3f} eV/A")
    logger.info(f"Std. dev. of force magnitude: {std_force_mag:.3f} eV/A")
    logger.info(f"Min / max force magnitude: {min_force_mag:.3f} / {max_force_mag:.3f} eV/A")

    # Clean up and store the dataset
    df.drop(
        columns=n_el_cols + ["comp_dict", "volume", "n_atoms", "magnitude_forces"],
        inplace=True,
    )
    df.to_pickle(output_dataset_filename, compression="gzip", protocol=4)
    logger.info(f"Store dataset into {output_dataset_filename}")


if __name__ == "__main__":
    main()
