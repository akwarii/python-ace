#!/usr/bin/env python
import logging
from argparse import ArgumentParser
from pathlib import Path

from pyace import BBasisConfiguration
from pyace.aceselect import (
    load_multiple_datasets,
    save_selected_structures,
    select_structures_maxvol,
)
from pyace.activelearning import compute_A_active_inverse, load_active_inverse_set

LOG_FMT = "%(asctime)s %(levelname).1s - %(message)s"
logging.basicConfig(level=logging.INFO, format=LOG_FMT, datefmt="%Y/%m/%d %H:%M:%S")
logger = logging.getLogger()


def build_parser() -> ArgumentParser:
    parser = ArgumentParser(
        prog="pace_select",
        description="Utility to select structures for training based on the D-optimality criterion.",
        add_help=False,
    )
    required = parser.add_argument_group("required named arguments")
    optional = parser.add_argument_group("optional named arguments")
    parser.add_argument(
        "dataset",
        nargs="+",
        help="Dataset file name(s), e.g., filename.pckl.gzip [extrapolative_structures.dat]",
        type=str,
    )
    required.add_argument(
        "-p",
        "--potential_file",
        help="Path to the B-basis configuration file (.yaml)",
        type=str,
        required=True,
    )
    optional.add_argument(
        "-h",
        "--help",
        action="help",
        help="Show this help message and exit",
    )
    optional.add_argument(
        "-a",
        "--active-set-inv",
        help="Path to the Active Set Inverted (ASI) file, used as extra B-projections",
        default=None,
        type=str,
        dest="active_set_inv_fname",
    )
    optional.add_argument(
        "-e",
        "--elements",
        type=str,
        help='List of elements used in LAMMPS, e.g., "Ni Nb O"',
    )
    optional.add_argument(
        "-m",
        "--max-structures",
        type=int,
        dest="max_structures",
        help="Maximum number of structures to select (default: -1, which means all)",
        default=-1,
    )
    optional.add_argument(
        "-o",
        "--output",
        dest="selected_structures_filename",
        type=str,
        help="Filename for the selected structures, e.g., selected.pkl.gz or structures/POSCAR (default: selected.pkl.gz)",
        default="selected.pkl.gz",
    )
    optional.add_argument(
        "-b",
        "--batch_size",
        help="Batch size (number of structures) to consider simultaneously. If not provided, the entire dataset is considered at once",
        default="auto",
        type=str,
    )
    optional.add_argument(
        "-g",
        "--gamma_tolerance",
        help="Tolerance for the gamma parameter (default: 1.01)",
        default=1.01,
        type=float,
    )
    optional.add_argument(
        "-i",
        "--maxvol_iters",
        help="Maximum number of iterations for the MaxVol algorithm (default: 300)",
        default=300,
        type=int,
    )
    optional.add_argument(
        "-r",
        "--maxvol_refinement",
        help="Number of refinements (epochs) for the MaxVol algorithm (default: 2)",
        default=2,
        type=int,
    )
    optional.add_argument(
        "-mem",
        "--memory-limit",
        help="Memory limit, e.g., 1GB, 500MB, or 'auto' (default: auto)",
        default="auto",
        type=str,
    )
    optional.add_argument(
        "-V",
        help="Suppress verbosity of numerical procedures",
        dest="not_verbose",
        default=False,
        action="store_true",
    )
    return parser


def main() -> None:
    parser = build_parser()
    args_parse = parser.parse_args()

    potential_file = args_parse.potential_file
    dataset_filename = args_parse.dataset
    batch_size_option = args_parse.batch_size
    gamma_tolerance = args_parse.gamma_tolerance
    maxvol_iters = args_parse.maxvol_iters
    maxvol_refinement = args_parse.maxvol_refinement

    max_structures = args_parse.max_structures
    selected_structures_filename = args_parse.selected_structures_filename
    verbose = not args_parse.not_verbose
    mem_lim_option = args_parse.memory_limit
    elements = args_parse.elements

    active_set_inv_fname = args_parse.active_set_inv_fname
    if active_set_inv_fname is None:
        active_set_inv_fname = potential_file.replace(".yaml", ".asi")

    if not Path(active_set_inv_fname).is_file():
        if verbose:
            logger.info(f"No ASI file {active_set_inv_fname} found")
        active_set_inv_fname = None

    if isinstance(dataset_filename, list):
        df = load_multiple_datasets(dataset_filename, elements, verbose)
    else:
        raise ValueError(f"Could not load dataset file: {dataset_filename}")

    if verbose:
        logger.info(f"Number of candidate structures: {len(df['ase_atoms'])}")
        logger.info(f"Loading B-basis configuration from {potential_file}")

    bconf = BBasisConfiguration(potential_file)

    if active_set_inv_fname:
        if verbose:
            logger.info(f"Loading Active Set Inverted  from {active_set_inv_fname}")
        asi = load_active_inverse_set(active_set_inv_fname)
        extra_A0_projections_dict = compute_A_active_inverse(asi)
    else:
        if verbose:
            logger.info("No Active Set Inverted provided")
        extra_A0_projections_dict = None

    df_selected = select_structures_maxvol(
        df,
        bconf,
        extra_A0_projections_dict,
        batch_size_option,
        gamma_tolerance,
        max_structures,
        maxvol_iters,
        maxvol_refinement,
        mem_lim_option,
        verbose,
    )

    save_selected_structures(df_selected, selected_structures_filename, verbose)


if __name__ == "__main__":
    main()
