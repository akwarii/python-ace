#!/usr/bin/env python
import argparse
from collections import defaultdict

from pyace import ACEBBasisSet


def build_parser() -> argparse.ArgumentParser:
    parser = argparse.ArgumentParser(
        prog="pace_info",
        description="Utility to analyze the shape and parameters of PACE (.yaml) potentials.",
    )
    parser.add_argument(
        "potential_file",
        help="Path to one or more B-basis files in .yaml format.",
        type=str,
        nargs="+",
        default=[],
    )
    return parser


def analyse_potential_shape(ace_potential: str) -> None:
    try:
        bbasis = ACEBBasisSet(ace_potential)
    except RuntimeError:
        raise ValueError(
            f"Unsupported format for 'ace_potential' argument ({type(ace_potential)}), "
            "must be .yaml filename, BBasisConfiguration or ACEBBasisSet"
        )

    elements_name = bbasis.elements_name
    embed_specs_map = bbasis.map_embedding_specifications
    bond_specs_map = bbasis.map_bond_specifications

    print(f"Available element(s):{' '.join(elements_name)}")
    print("=" * 80)
    print(" " * 10, "Embeddings")
    print("=" * 80)
    print("Element\tndens\tFSfunc\t\t\tFS_params")
    print("=" * 80)
    tot_n_func = 0
    for i, el in enumerate(elements_name):
        num_r1 = len(bbasis.basis_rank1[i])
        num_r = len(bbasis.basis[i])
        embed_specs = embed_specs_map[i]
        print(
            f"{el:3}\t{embed_specs.ndensity}\t{embed_specs.npoti}\t{embed_specs.FS_parameters}"
        )
        tot_n_func += num_r1 + num_r

    print("=" * 80)
    print(f"Total number of functions: {tot_n_func}")
    print()

    rcuts = {
        (elements_name[mu_i], elements_name[mu_j]): bond_spec.rcut
        for (mu_i, mu_j), bond_spec in bond_specs_map.items()
    }
    print(f"Maximum cutoff: {max(rcuts.values())} Ang")

    print("=" * 40)
    print(" " * 10, "Bonds")
    print("=" * 40)
    print(
        f"{'Bond':^7} {'radbase':^10} {'rcut':^8} {'r_in':^8} {'delta_in':^8} {'prehc':^8} {'lambdahc':^8} {'core-rep':^8}"
    )
    print("=" * 40)
    for (mu_i, mu_j), bond_spec in bond_specs_map.items():
        el_i = elements_name[mu_i]
        el_j = elements_name[mu_j]
        rc = bond_spec.rcut
        print(
            f"{el_i:^3}-{el_j:^3} {bond_spec.radbasename:^10} {rc:^8.3f} {bond_spec.rcut_in:^8.3f}"
            f" {bond_spec.dcut_in:^8.3f} {bond_spec.prehc:^8.3f} {bond_spec.lambdahc:^8.3f} {bond_spec.inner_cutoff_type:^8}",
        )
    print("=" * 40)

    print("\n")
    print("=" * 40)
    print(" " * 10, "Functions (per order)")
    print("=" * 40)
    for i, el in enumerate(bbasis.elements_name):
        nradmax_dd = defaultdict(lambda: 0)  # [order] -> ns
        lmax_dd = defaultdict(lambda: 0)  # [order] -> ls
        nfuncs_dd = defaultdict(lambda: 0)  # [order] -> nfuncs

        # order 1 - determine nradbase
        nradbase = max([max(func.ns) for func in bbasis.basis_rank1[i]])

        nradmax_dd[1] = nradbase
        nfuncs_dd[1] = len(bbasis.basis_rank1[i])
        max_r = 0
        # order > 1 - determine nradmax, lmax
        for func in bbasis.basis[i]:
            r = func.rank
            nradmax_dd[r] = max(nradmax_dd[r], max(func.ns))
            lmax_dd[r] = max(lmax_dd[r], max(func.ls))
            max_r = max(max_r, r)
            nfuncs_dd[r] += 1

        # element
        print(el)
        print("order  :", end="\t")
        for r in range(1, max_r + 1):
            print(r, end="\t")
        print()

        # nradmax per order
        print("nradmax:", end="\t")
        for r in range(1, max_r + 1):
            print(nradmax_dd[r], end="\t")
        print()

        # lmax per order
        print("lmax   :", end="\t")
        for r in range(1, max_r + 1):
            print(lmax_dd[r], end="\t")
        print()

        # nfuncs per order
        print("nfuncs :", end="\t")
        for r in range(1, max_r + 1):
            print(nfuncs_dd[r], end="\t")
        print("sum=", sum(nfuncs_dd.values()))

        print()
        print("-" * 20)
    print("=" * 40)


def main() -> None:
    parser = build_parser()
    args_parse = parser.parse_args()
    potential_files = args_parse.potential_file

    for potential_file in potential_files:
        analyse_potential_shape(potential_file)


if __name__ == "__main__":
    main()
