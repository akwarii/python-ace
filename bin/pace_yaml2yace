#!/usr/bin/python3
import argparse

from pyace import ACEBBasisSet


def build_parser():
    parser = argparse.ArgumentParser(
        prog="pace_yaml2yace",
        description="Utility to convert B-basis YAML files to Ctilde-basis YACE files.",
    )
    parser.add_argument(
        "input",
        help="Input B-basis YAML file(s) to be converted. Accepts multiple files.",
        type=str,
        nargs="+",
        default=[],
    )
    parser.add_argument(
        "-o",
        "--output",
        help="Output Ctilde-basis YACE file name. If not specified, the input file name with a .yace extension will be used.",
        type=str,
        default="",
    )

    return parser


def main():
    parser = build_parser()
    args_parse = parser.parse_args()
    input_yaml_filenames = args_parse.input
    output_ace_filename = args_parse.output

    for input_yaml_filename in input_yaml_filenames:
        if output_ace_filename == "":
            if input_yaml_filename.endswith("yaml"):
                actual_output_ace_filename = input_yaml_filename.replace("yaml", "yace")
            elif input_yaml_filename.endswith("yml"):
                actual_output_ace_filename = input_yaml_filename.replace("yml", "yace")
            else:
                actual_output_ace_filename = input_yaml_filename + ".yace"
        else:
            actual_output_ace_filename = output_ace_filename

        print(f"Loading B-basis from '{input_yaml_filename}'")
        bbasis = ACEBBasisSet(input_yaml_filename)
        print("Converting to Ctilde-basis")
        cbasis = bbasis.to_ACECTildeBasisSet()
        print(f"Saving Ctilde-basis to '{actual_output_ace_filename}'")
        cbasis.save_yaml(actual_output_ace_filename)


if __name__ == "__main__":
    main()
